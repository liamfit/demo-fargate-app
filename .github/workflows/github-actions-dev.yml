name: Build and Deploy - Development

on: 
  pull_request:

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set repo short name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Terraform init
        id: init
        working-directory: terraform
        run: >
          terraform init
          -backend-config="region=${{ secrets.AWS_REGION }}"
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          -backend-config="key=${REPO_SHORT_NAME}/dev/terraform.tfstate"

      - name: Terraform apply
        id: apply
        working-directory: terraform
        run: >
          terraform apply -auto-approve -no-color -input=false
          -var="service_name=${REPO_SHORT_NAME}"
          -var="project=${{ vars.PROJECT }}"
          -var="environment=dev"
          -var="aws_region=${{ secrets.AWS_REGION }}"
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v6
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply ðŸŽ¬\`${{ steps.apply.outcome }}\`

            <details><summary>Show Result</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Terraform apply status
        if: steps.apply.outcome == 'failure'
        run: exit 1

  build:
    name: Build and Push
    needs: terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Set repo short name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17
          cache: maven

      - name: Package with Maven
        id: package
        run: |
          ./mvnw package 
          mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set container name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$REPO_SHORT_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPO_SHORT_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPO_SHORT_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Pull task definition
        run: >
          aws ecs describe-task-definition
          --task-definition $REPO_SHORT_NAME
          --query taskDefinition > task-definition.json

      - name: Render task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: ${{ env.REPO_SHORT_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          task-definition: task-definition.json

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: task-definition
          path: ${{ steps.task-def.outputs.task-definition }}

  deploy-to-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Set repo short name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Download artifact
        id: download
        uses: actions/download-artifact@v3
        with:
          name: task-definition

      - name: Rename file
        run: mv task-definition-*.json task-definition.json
      
      - name: Output task definition
        run: cat task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.REPO_SHORT_NAME }}
          cluster: ecs-fargate
          wait-for-service-stability: true