name: Build and Deploy - Development

on: 
  pull_request:


env:
  CONTAINER_NAME: sample-app

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Package with Maven
        id: package
        run: |
          ./mvnw package 
          mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_INFRA_ACCOUNT_ID }}:role/${{ secrets.AWS_INFRA_ACCOUNT_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$GITHUB_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$GITHUB_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ACCOUNT_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Debug
        run: |
          echo '${{ env.GITHUB_REPOSITORY }}'
          echo '${{ steps.build-image.outputs.image }}'
          pwd
          ls -la

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: $CONTAINER_NAME
          image: test
          task-definition: .aws/task-definition.json
        env:
          CONTAINER_NAME: ${{ env.GITHUB_REPOSITORY }}

      - name: Output task definition
        run: echo ${{ steps.task-def.outputs.task-definition }}
